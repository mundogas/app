"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findTargetByName = exports.findApplicationTarget = exports.resolveTargetsAsync = void 0;
const config_plugins_1 = require("@expo/config-plugins");
const eas_build_job_1 = require("@expo/eas-build-job");
const workflow_1 = require("../workflow");
const bundleIdentifier_1 = require("./bundleIdentifier");
async function resolveTargetsAsync({ exp, projectDir }, { buildConfiguration, buildScheme }) {
    const result = [];
    const applicationTarget = await readApplicationTargetForSchemeAsync(projectDir, buildScheme);
    const bundleIdentifier = await (0, bundleIdentifier_1.getBundleIdentifierAsync)(projectDir, exp, {
        targetName: applicationTarget.name,
        buildConfiguration,
    });
    result.push({
        targetName: applicationTarget.name,
        bundleIdentifier,
        buildConfiguration,
    });
    const dependencies = await resolveDependenciesAsync({
        exp,
        projectDir,
        buildConfiguration,
        target: applicationTarget,
        bundleIdentifier,
    });
    if (dependencies.length > 0) {
        result.push(...dependencies);
    }
    return result;
}
exports.resolveTargetsAsync = resolveTargetsAsync;
async function resolveDependenciesAsync({ exp, projectDir, buildConfiguration, target, bundleIdentifier, }) {
    const result = [];
    if (target.dependencies && target.dependencies.length > 0) {
        for (const dependency of target.dependencies) {
            const dependencyBundleIdentifier = await (0, bundleIdentifier_1.getBundleIdentifierAsync)(projectDir, exp, {
                targetName: dependency.name,
                buildConfiguration,
            });
            result.push({
                targetName: dependency.name,
                buildConfiguration,
                bundleIdentifier: dependencyBundleIdentifier,
                parentBundleIdentifier: bundleIdentifier,
            });
            const dependencyDependencies = await resolveDependenciesAsync({
                exp,
                projectDir,
                buildConfiguration,
                target: dependency,
                bundleIdentifier: dependencyBundleIdentifier,
            });
            if (dependencyDependencies.length > 0) {
                result.push(...dependencyDependencies);
            }
        }
    }
    return result;
}
async function readApplicationTargetForSchemeAsync(projectDir, scheme) {
    const workflow = await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.IOS);
    if (workflow === eas_build_job_1.Workflow.GENERIC) {
        return await config_plugins_1.IOSConfig.Target.findApplicationTargetWithDependenciesAsync(projectDir, scheme);
    }
    else {
        return {
            name: scheme,
            type: config_plugins_1.IOSConfig.Target.TargetType.APPLICATION,
            dependencies: [],
        };
    }
}
function findApplicationTarget(targets) {
    const applicationTarget = targets.find(({ parentBundleIdentifier }) => !parentBundleIdentifier);
    if (!applicationTarget) {
        throw new Error('Could not find the application target');
    }
    return applicationTarget;
}
exports.findApplicationTarget = findApplicationTarget;
function findTargetByName(targets, name) {
    const target = targets.find(target => target.targetName === name);
    if (!target) {
        throw new Error(`Could not find target '${name}'`);
    }
    return target;
}
exports.findTargetByName = findTargetByName;
