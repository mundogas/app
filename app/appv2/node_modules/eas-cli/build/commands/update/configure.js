"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const config_1 = require("@expo/config");
const eas_build_job_1 = require("@expo/eas-build-job");
const chalk_1 = (0, tslib_1.__importDefault)(require("chalk"));
const api_1 = require("../../api");
const EasCommand_1 = (0, tslib_1.__importDefault)(require("../../commandUtils/EasCommand"));
const log_1 = (0, tslib_1.__importStar)(require("../../log"));
const projectUtils_1 = require("../../project/projectUtils");
const workflow_1 = require("../../project/workflow");
const DEFAULT_MANAGED_RUNTIME_VERSION = { policy: 'sdkVersion' };
const DEFAULT_BARE_RUNTIME_VERSION = '1.0.0';
async function configureProjectForEASUpdateAsync(projectDir, exp, isBare) {
    var _a, _b;
    const projectId = await (0, projectUtils_1.getProjectIdAsync)(exp);
    const easUpdateURL = (0, api_1.getEASUpdateURL)(projectId);
    const preexistingRuntimeVersion = exp.runtimeVersion;
    const defaultRuntimeVersion = isBare
        ? DEFAULT_BARE_RUNTIME_VERSION
        : DEFAULT_MANAGED_RUNTIME_VERSION;
    const result = await (0, config_1.modifyConfigAsync)(projectDir, {
        runtimeVersion: preexistingRuntimeVersion !== null && preexistingRuntimeVersion !== void 0 ? preexistingRuntimeVersion : defaultRuntimeVersion,
        updates: { ...exp.updates, url: easUpdateURL },
    });
    switch (result.type) {
        case 'success':
            if ((_a = exp.updates) === null || _a === void 0 ? void 0 : _a.url) {
                if (exp.updates.url !== easUpdateURL) {
                    log_1.default.withTick(`Overwrote "${(_b = exp.updates) === null || _b === void 0 ? void 0 : _b.url}" with "${easUpdateURL}" for the updates.url value in app.json`);
                }
            }
            else {
                log_1.default.withTick(`Set updates.url value, to "${easUpdateURL}" in app.json`);
            }
            if (!preexistingRuntimeVersion) {
                log_1.default.withTick(`Set runtimeVersion to "${JSON.stringify(defaultRuntimeVersion)}" in app.json`);
            }
            break;
        case 'warn': {
            log_1.default.addNewLineIfNone();
            log_1.default.warn(`It looks like you are using a dynamic configuration! ${(0, log_1.learnMore)('https://docs.expo.dev/workflow/configuration/#dynamic-configuration-with-appconfigjs)')}`);
            log_1.default.warn(`In order to finish configuring your project for EAS Update, you are going to need manually add the following to your app.config.js:\n${(0, log_1.learnMore)('https://expo.fyi/eas-update-config.md')}\n`);
            log_1.default.log(chalk_1.default.bold(`{\n  "updates": {\n    "url": "${easUpdateURL}"\n  },\n  "runtimeVersion": {\n    "policy": "sdkVersion"\n  }\n}`));
            log_1.default.addNewLineIfNone();
            throw new Error(result.message);
        }
        case 'fail':
            throw new Error(result.message);
        default:
            throw new Error('Unexpected result type from modifyConfigAsync');
    }
}
class UpdateConfigure extends EasCommand_1.default {
    async runAsync() {
        log_1.default.log('üí° The following process will configure your project to run EAS Update. These changes only apply to your local project files and you can safely revert them at any time.');
        const projectDir = await (0, projectUtils_1.findProjectRootAsync)();
        const { exp } = (0, config_1.getConfig)(projectDir, {
            skipSDKVersionRequirement: true,
        });
        const hasAndroidNativeProject = (await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.ANDROID)) === eas_build_job_1.Workflow.GENERIC;
        const hasIosNativeProject = (await (0, workflow_1.resolveWorkflowAsync)(projectDir, eas_build_job_1.Platform.IOS)) === eas_build_job_1.Workflow.GENERIC;
        const isBare = hasAndroidNativeProject || hasIosNativeProject;
        await configureProjectForEASUpdateAsync(projectDir, exp, isBare);
        log_1.default.addNewLineIfNone();
        if (isBare) {
            log_1.default.log(`üßê It seems you are on the bare workflow! Please also update your native files. You can do this by either running ${chalk_1.default.bold('eas build:configure')} or manually editing Expo.plist/AndroidManifest.xml. ${(0, log_1.learnMore)('https://expo.fyi/eas-update-config.md#native-configuration')}`);
        }
        else {
            log_1.default.log(`üéâ Your app is configured to run EAS Update!`);
        }
    }
}
exports.default = UpdateConfigure;
UpdateConfigure.description = 'Configure the project to support EAS Update.';
