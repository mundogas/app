"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadWithPresignedPostAsync = exports.uploadAsync = void 0;
const tslib_1 = require("tslib");
const assert_1 = (0, tslib_1.__importDefault)(require("assert"));
const form_data_1 = (0, tslib_1.__importDefault)(require("form-data"));
const fs_extra_1 = (0, tslib_1.__importDefault)(require("fs-extra"));
const got_1 = (0, tslib_1.__importDefault)(require("got"));
const UploadSessionMutation_1 = require("./graphql/mutations/UploadSessionMutation");
async function uploadAsync(type, path, handleProgressEvent) {
    const presignedPost = await UploadSessionMutation_1.UploadSessionMutation.createUploadSessionAsync(type);
    const url = await uploadWithPresignedPostAsync(fs_extra_1.default.createReadStream(path), presignedPost, handleProgressEvent);
    (0, assert_1.default)(presignedPost.fields.key, 'key is not specified in in presigned post');
    return { url, bucketKey: presignedPost.fields.key };
}
exports.uploadAsync = uploadAsync;
async function uploadWithPresignedPostAsync(stream, presignedPost, handleProgressEvent) {
    const form = new form_data_1.default();
    for (const [fieldKey, fieldValue] of Object.entries(presignedPost.fields)) {
        form.append(fieldKey, fieldValue);
    }
    form.append('file', stream);
    const formHeaders = form.getHeaders();
    let uploadPromise = got_1.default.post(presignedPost.url, { body: form, headers: { ...formHeaders } });
    if (handleProgressEvent) {
        uploadPromise = uploadPromise.on('uploadProgress', progress => handleProgressEvent({ progress }));
        try {
            const response = await uploadPromise;
            handleProgressEvent({ isComplete: true });
            return String(response.headers.location);
        }
        catch (error) {
            handleProgressEvent({ isComplete: true, error });
            throw error;
        }
    }
    const response = await uploadPromise;
    return String(response.headers.location);
}
exports.uploadWithPresignedPostAsync = uploadWithPresignedPostAsync;
