"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInternalDistributionInstallUrl = exports.getArtifactUrl = exports.getBuildLogsUrl = exports.getProjectDashboardUrl = void 0;
const tslib_1 = require("tslib");
const assert_1 = (0, tslib_1.__importDefault)(require("assert"));
const api_1 = require("../../api");
const generated_1 = require("../../graphql/generated");
function getProjectDashboardUrl(accountName, projectName) {
    return `${(0, api_1.getExpoWebsiteBaseUrl)()}/accounts/${accountName}/projects/${projectName}`;
}
exports.getProjectDashboardUrl = getProjectDashboardUrl;
function getBuildLogsUrl(build) {
    const { project } = build;
    if (project.__typename === 'App') {
        return `${(0, api_1.getExpoWebsiteBaseUrl)()}/accounts/${project.ownerAccount.name}/builds/${build.id}`;
    }
    else {
        return `${(0, api_1.getExpoWebsiteBaseUrl)()}/builds/${build.id}`;
    }
}
exports.getBuildLogsUrl = getBuildLogsUrl;
function getArtifactUrl(artifactId) {
    return `${(0, api_1.getExpoWebsiteBaseUrl)()}/artifacts/${artifactId}`;
}
exports.getArtifactUrl = getArtifactUrl;
function getInternalDistributionInstallUrl(build) {
    var _a;
    if (build.platform === generated_1.AppPlatform.Ios) {
        return `itms-services://?action=download-manifest;url=${(0, api_1.getExpoApiBaseUrl)()}/v2/projects/${build.project.id}/builds/${build.id}/manifest.plist`;
    }
    (0, assert_1.default)((_a = build.artifacts) === null || _a === void 0 ? void 0 : _a.buildUrl, 'buildUrl is missing');
    return build.artifacts.buildUrl;
}
exports.getInternalDistributionInstallUrl = getInternalDistributionInstallUrl;
