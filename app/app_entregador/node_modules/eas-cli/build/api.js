"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEASUpdateURL = exports.getExpoWebsiteBaseUrl = exports.getExpoApiBaseUrl = exports.apiClient = void 0;
const tslib_1 = require("tslib");
const got_1 = (0, tslib_1.__importStar)(require("got"));
const ApiV2Error_1 = (0, tslib_1.__importDefault)(require("./ApiV2Error"));
const sessionStorage_1 = require("./user/sessionStorage");
exports.apiClient = got_1.default.extend({
    prefixUrl: getExpoApiBaseUrl() + '/v2/',
    hooks: {
        beforeRequest: [
            (options) => {
                const token = (0, sessionStorage_1.getAccessToken)();
                if (token) {
                    options.headers.authorization = `Bearer ${token}`;
                    return;
                }
                const sessionSecret = (0, sessionStorage_1.getSessionSecret)();
                if (sessionSecret) {
                    options.headers['expo-session'] = sessionSecret;
                }
            },
        ],
        beforeError: [
            (error) => {
                var _a;
                if (error instanceof got_1.HTTPError) {
                    let result;
                    try {
                        result = JSON.parse(error.response.body);
                    }
                    catch (e2) {
                        return error;
                    }
                    if ((_a = result.errors) === null || _a === void 0 ? void 0 : _a.length) {
                        return new ApiV2Error_1.default(error, result.errors[0]);
                    }
                }
                return error;
            },
        ],
    },
});
function getExpoApiBaseUrl() {
    if (process.env.EXPO_STAGING) {
        return `https://staging-api.expo.dev`;
    }
    else if (process.env.EXPO_LOCAL) {
        return `http://127.0.0.1:3000`;
    }
    else {
        return `https://api.expo.dev`;
    }
}
exports.getExpoApiBaseUrl = getExpoApiBaseUrl;
function getExpoWebsiteBaseUrl() {
    if (process.env.EXPO_STAGING) {
        return `https://staging.expo.dev`;
    }
    else if (process.env.EXPO_LOCAL) {
        return `http://expo.test`;
    }
    else {
        return `https://expo.dev`;
    }
}
exports.getExpoWebsiteBaseUrl = getExpoWebsiteBaseUrl;
function getEASUpdateURL(projectId) {
    if (process.env.EXPO_STAGING) {
        return new URL(projectId, `https://staging-u.expo.dev`).href;
    }
    else if (process.env.EXPO_LOCAL) {
        return new URL(`expo-updates/${projectId}`, `http://127.0.0.1:3000`).href;
    }
    else {
        return new URL(projectId, `https://u.expo.dev`).href;
    }
}
exports.getEASUpdateURL = getEASUpdateURL;
