{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../_services/_auth/token.service\";\nimport * as i2 from \"@angular/router\";\nexport let ResponseService = /*#__PURE__*/(() => {\n  class ResponseService {\n    constructor(tokenSrv, router) {\n      this.tokenSrv = tokenSrv;\n      this.router = router; //Erro quando não tem dados\n\n      this.withoutData = false; //Alert\n\n      this.open = false; //Aberto ou não\n\n      this.open2 = false; //2º alerta\n\n      this.open3 = false; //3º alerta\n\n      this.dismissible = true; //Se aparece o botão pra fechar\n\n      this.timeout = 5000; //Tempo que fica na tela\n\n      this.alertType = ''; //Se é success ou danger\n\n      this.alertResponse = []; //A mensagem\n    }\n    /*==========SUCCESS==========*/\n    //Tratamento de success ao editar perfil, abre alerta\n\n\n    handleSuccessPerfil(mensagem, alert) {\n      this.alertResponse.push(mensagem.message); //Altera os dados no storage\n\n      this.tokenSrv.setUser(mensagem.data); //Após verificar os erros, abrir o alert\n\n      alert == 1 ? this.open = true : alert == 2 ? this.open2 = true : this.open3 = true;\n      this.alertType = 'success'; //Fechar o alerta\n\n      this.onTimeout();\n    } //Tratamento de success, abre alerta\n\n\n    handleSuccess(mensagem, alert) {\n      this.alertResponse.push(mensagem.message); //Após verificar os erros, abrir o alert\n\n      alert == 1 ? this.open = true : alert == 2 ? this.open2 = true : this.open3 = true;\n      this.alertType = 'success'; //Fechar o alerta\n\n      this.onTimeout();\n    }\n    /*==========ERROR==========*/\n    //Tratamento de erro ao editar perfil administrativo\n\n\n    handleErrorUpdate(mensagem, alert) {\n      if (mensagem.email) {\n        if (mensagem.email.length > 0) {\n          this.alertResponse.push(mensagem.email);\n        }\n      }\n\n      if (mensagem.name) {\n        if (mensagem.name.length > 0) {\n          this.alertResponse.push(mensagem.name);\n        }\n      } //Após verificar os erros, abrir o alert\n\n\n      alert == 1 ? this.open = true : alert == 2 ? this.open2 = true : this.open3 = true;\n      this.alertType = 'danger'; //Fechar o alerta\n\n      this.onTimeout();\n    } //Verifica o status code do erro, e direciona para o tratamento correto\n\n\n    handleErrorStatusCode(status, mensagem, alert) {\n      if (status === 401) {\n        this.handleErrorAuth(mensagem, alert);\n      }\n\n      if (status === 404) {\n        this.handleDataError(mensagem);\n        return;\n      }\n\n      if (status === 422) {\n        this.handleError(mensagem, alert);\n        return;\n      }\n\n      if (status === 500) {\n        this.handleServerError(mensagem);\n      }\n    } //401 - Sem autorização, login\n\n\n    handleErrorAuth(mensagem, alert) {\n      this.alertResponse.push(mensagem.error.message); //Após verificar os erros, abrir o alert\n\n      alert == 1 ? this.open = true : alert == 2 ? this.open2 = true : this.open3 = true;\n      this.alertType = 'danger'; //Fechar o alerta\n\n      this.onTimeout();\n    } //404 - Tratamento de erro quando está sem dados\n\n\n    handleDataError(mensagem) {\n      this.alertResponse.push(mensagem.message); //Após verificar os erros, abrir o alert\n\n      this.open = true;\n      this.alertType = 'danger'; //Fechar o alerta\n\n      this.onTimeout();\n    } //500 - Tratamento de erro de servidor\n\n\n    handleServerError(mensagem) {\n      this.alertResponse.push(mensagem.message); //Se existir token, limpar\n\n      if (this.tokenSrv.getToken()) {\n        this.tokenSrv.remove(); //Redirecionar para o login\n\n        this.router.navigateByUrl('/');\n      }\n    } //422 - Tratamento de erros de exceções, abre alerta\n\n\n    handleError(mensagem, alert) {\n      let array = mensagem.errors;\n\n      if (Array.isArray(array)) {\n        array.forEach(element => {\n          this.alertResponse.push(element);\n        });\n      } else {\n        this.alertResponse.push(mensagem.error.errors);\n      } //Após verificar os erros, abrir o alert\n\n\n      alert == 1 ? this.open = true : this.open2 = true;\n      this.alertType = 'danger'; //Fechar o alerta\n\n      this.onTimeout();\n    } //Fecha o alerta ao clicar no botão\n\n\n    onClosed() {\n      this.open = false;\n      this.open2 = false;\n      this.open3 = false;\n    } //Fecha o alerta após 5 segundos\n\n\n    onTimeout() {\n      setTimeout(() => {\n        this.open = false;\n        this.open2 = false;\n        this.open3 = false;\n      }, this.timeout);\n    }\n\n  }\n\n  ResponseService.ɵfac = function ResponseService_Factory(t) {\n    return new (t || ResponseService)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.Router));\n  };\n\n  ResponseService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ResponseService,\n    factory: ResponseService.ɵfac,\n    providedIn: 'root'\n  });\n  return ResponseService;\n})();","map":null,"metadata":{},"sourceType":"module"}